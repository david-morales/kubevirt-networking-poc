apiVersion: v1
kind: Secret
metadata:
  name: mongodb-vm-userdata
  namespace: {{ .Values.namespace }}
type: Opaque
stringData:
  userdata: |
    #cloud-config
    users:
      - name: neo
        plain_text_passwd: 'neo'
        lock_passwd: false
        groups: users, admin
        sudo: ALL=(ALL) NOPASSWD:ALL
    hostname: mongodb-vm
    package_upgrade: true
    write_files:
      - content: |
          - hosts: localhost
            pre_tasks:
              - name: Include Ansible vars
                include_vars:
                  file: /mnt/ansible-vars/mongo-ansible_vars.yml
            roles:
              - community.mongodb.mongodb_repository
              - community.mongodb.mongodb_install
              - community.mongodb.mongodb_mongod
            post_tasks:
              - name: Install python-setuptools
                package:
                  name: python-setuptools
                  state: latest
                  update_cache: yes
              - name: Install python-pip
                package:
                  name: python-pip
                  state: latest
              - name: Ensure pymongo is installed
                pip:
                  name: pymongo>2.4.2
                  state: present
              - name: Ensure replicaset "rs0" exists
                community.mongodb.mongodb_replicaset:
                  login_host: '{{ "{{ master_host }}" }}'
                  login_port: '{{ "{{ config_port }}" }}'
                  ssl: true
                  ssl_certfile: '{{ "{{ mongodb_certificate_key_file }}" }}'
                  ssl_ca_certs: '{{ "{{ mongodb_certificate_ca_file }}" }}'
                  replica_set: '{{ "{{ replicaset_name }}" }}'                  
                  members:
                    - '{{ "{{ master_host }}:{{ config_port }}" }}'
                    - 'mongodb-0.poc-certificates.svc.cluster.local:{{ "{{" }} config_port {{ "}}" }}'
                    - 'mongodb-1.poc-certificates.svc.cluster.local:{{ "{{" }} config_port {{ "}}" }}'
                  validate: no
                when: ansible_hostname == "mongodb-vm-2"               
              - name: Wait for the replicaset to stabilise
                community.mongodb.mongodb_status:
                  login_host: '{{ "{{ master_host }}" }}'
                  login_port: '{{ "{{ config_port }}" }}'
                  ssl: true
                  ssl_certfile: '{{ "{{ mongodb_certificate_key_file }}" }}'
                  ssl_ca_certs: '{{ "{{ mongodb_certificate_ca_file }}" }}'
                  replica_set: '{{ "{{ replicaset_name }}" }}'
                  poll: 5
                  interval: 10
                  validate: minimal
                when: ansible_hostname == "mongodb-vm-2"
        path: /root/mongodb_replica_setup.yml
      - content: |
          #!/bin/bash
          ansible-galaxy collection install community.mongodb
          ansible-playbook /root/mongodb_replica_setup.yml
        path: /root/run_ansible.sh
        permissions: '0755'
    ansible:
      package_name: ansible-core
      install_method: distro
      run_user: neo
    runcmd:
      # mount the ConfigMap
      - "mkdir /mnt/ansible-vars"
      - "mount /dev/$(lsblk --nodeps -no name,serial | grep SERIAL-ANSIBLE-VARS | cut -f1 -d' ') /mnt/ansible-vars"
      - mkdir -p /mnt/mongodb-cert-tls && mount /dev/$(lsblk --nodeps -no name,serial | grep SERIAL | cut -f1 -d' ') /mnt/mongodb-cert-tls
      - cp /mnt/mongodb-cert-tls/tls.crt /etc/ssl/tls.crt
      - cp /mnt/mongodb-cert-tls/tls.key /etc/ssl/tls.key
      - cp /mnt/mongodb-cert-tls/ca.crt /etc/ssl/ca.crt
      - cat /etc/ssl/tls.crt /etc/ssl/tls.key > /etc/ssl/mongodb.pem
      - /root/run_ansible.sh